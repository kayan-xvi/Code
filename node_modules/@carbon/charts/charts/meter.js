var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
// Internal Imports
import { MeterChartModel } from '../model/meter';
import { Chart } from '../chart';
import * as Configuration from '../configuration';
import { LayoutGrowth, LayoutDirection, RenderTypes, } from '../interfaces/index';
import * as Tools from '../tools';
import { Meter } from './../components/graphs/meter';
// Components
import { LayoutComponent, MeterTitle, Spacer, } from '../components/index';
var MeterChart = /** @class */ (function (_super) {
    __extends(MeterChart, _super);
    function MeterChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new MeterChartModel(_this.services);
        // use prop meter options or regular meter options
        var options = chartConfigs.options.meter.proportional
            ? Tools.merge(Tools.clone(Configuration.options.proportionalMeterChart), chartConfigs.options)
            : Tools.merge(Tools.clone(Configuration.options.meterChart), chartConfigs.options);
        // Merge the default options for this chart
        // With the user provided options
        _this.model.setOptions(options);
        // Initialize data, services, components etc.
        _this.init(holder, chartConfigs);
        return _this;
    }
    MeterChart.prototype.getComponents = function () {
        var showLabels = Tools.getProperty(this.model.getOptions(), 'meter', 'showLabels');
        var meterComponents = __spreadArrays((showLabels
            ? [
                // Meter has a unique dataset title within the graph
                {
                    id: 'meter-title',
                    components: [
                        new MeterTitle(this.model, this.services),
                    ],
                    growth: LayoutGrowth.STRETCH,
                    renderType: RenderTypes.SVG,
                },
                // Create the title spacer
                {
                    id: 'spacer',
                    components: [
                        new Spacer(this.model, this.services, {
                            size: 8,
                        }),
                    ],
                    growth: LayoutGrowth.STRETCH,
                },
            ]
            : []), [
            // Specify what to render inside the graph only
            {
                id: 'meter-graph',
                components: [new Meter(this.model, this.services)],
                growth: LayoutGrowth.STRETCH,
                renderType: RenderTypes.SVG,
            },
        ]);
        // the graph frame for meter includes the custom title (and spacer)
        var graphFrame = [
            new LayoutComponent(this.model, this.services, meterComponents, {
                direction: LayoutDirection.COLUMN,
            }),
        ];
        // add the meter title as a top level component
        var components = this.getChartComponents(graphFrame, {
            graphFrameRenderType: RenderTypes.HTML,
        });
        return components;
    };
    return MeterChart;
}(Chart));
export { MeterChart };
//# sourceMappingURL=../../src/charts/meter.js.map