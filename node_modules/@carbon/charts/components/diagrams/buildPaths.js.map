{"version":3,"file":"buildPaths.js","sourceRoot":"","sources":["buildPaths.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,IAAI,MAAM,EAAE,MAAM,SAAS,CAAC;AAEzC;;;;;;;;;GASG;AACH,IAAM,uBAAuB,GAAG,UAAC,MAAM,EAAE,MAAM;IAC9C,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAEpB,IAAM,IAAI,GAAG,MAAM,EAAE,CAAC;IAEtB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACpB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEpB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF;;;;;;;;;;GAUG;AACH,IAAM,oBAAoB,GAAG,UAAC,MAAM,EAAE,MAAM,EAAE,OAAa;IAAb,wBAAA,EAAA,aAAa;IAC1D,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAEpB,IAAM,IAAI,GAAG,MAAM,EAAE,CAAC;IAEtB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACpB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEpB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF;;;;;;;;;;;;;GAaG;AACH,IAAM,qBAAqB,GAAG,UAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IACpE,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACpB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IAEpB,IAAM,IAAI,GAAG,MAAM,EAAE,CAAC;IAEtB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACpB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAEnD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,OAAO,EAAE,uBAAuB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,CAAC","sourcesContent":["import { path as d3Path } from 'd3-path';\n\n/**\n * Returns a path string for a straight path\n * @param  {Object} source - The source coordinates\n * @param  {Number} source.x - The source's x coordinate\n * @param  {Number} source.y - The source's y coordinate\n * @param  {Object} target - The target coordinates\n * @param  {Number} target.x - The target's x coordinate\n * @param  {Number} target.y - The target's y coordinate\n * @return {String} The path string\n */\nconst buildStraightPathString = (source, target) => {\n\tconst sx = source.x;\n\tconst sy = source.y;\n\tconst tx = target.x;\n\tconst ty = target.y;\n\n\tconst path = d3Path();\n\n\tpath.moveTo(sx, sy);\n\tpath.lineTo(tx, ty);\n\n\treturn path.toString();\n};\n\n/**\n * Returns a path string for an elbow path with a bend point\n * @param  {Object} source - The source coordinates\n * @param  {Number} source.x - The source's x coordinate\n * @param  {Number} source.y - The source's y coordinate\n * @param  {Object} target - The target coordinates\n * @param  {Number} target.x - The target's x coordinate\n * @param  {Number} target.y - The target's y coordinate\n * @param  {Number} percent - Where the bend point should appear between the source and target\n * @return {String} The path string\n */\nconst buildElbowPathString = (source, target, percent = 0.5) => {\n\tconst sx = source.x;\n\tconst sy = source.y;\n\tconst tx = target.x;\n\tconst ty = target.y;\n\n\tconst path = d3Path();\n\n\tpath.moveTo(sx, sy);\n\tpath.lineTo(sx + (tx - sx) * percent, sy);\n\tpath.lineTo(sx + (tx - sx) * percent, ty);\n\tpath.lineTo(tx, ty);\n\n\treturn path.toString();\n};\n\n/**\n * Returns a path string for an path with a custom bezier curve\n * @param  {Object} source - The source coordinates\n * @param  {Number} source.x - The source's x coordinate\n * @param  {Number} source.y - The source's y coordinate\n * @param  {Object} target - The target coordinates\n * @param  {Number} target.x - The target's x coordinate\n * @param  {Number} target.y - The target's y coordinate\n * @param  {Number} cpx1 - X coordinate for the first control point\n * @param  {Number} cpy1 - Y coordinate for the first control point\n * @param  {Number} cpx2 - X coordinate for the second control point\n * @param  {Number} cpy1 - Y coordinate for the second control point\n * @return {String} The path string\n */\nconst buildBezierPathString = (source, target, cpx1, cpy1, cpx2, cpy2) => {\n\tconst sx = source.x;\n\tconst sy = source.y;\n\tconst tx = target.x;\n\tconst ty = target.y;\n\n\tconst path = d3Path();\n\n\tpath.moveTo(sx, sy);\n\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, tx, ty);\n\n\treturn path.toString();\n};\n\nexport { buildStraightPathString, buildElbowPathString, buildBezierPathString };\n"]}