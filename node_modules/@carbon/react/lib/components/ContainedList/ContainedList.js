/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var useId = require('../../internal/useId.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const variants = ['on-page', 'disclosed'];

function filterChildren(children) {
  var _children$type;

  if (Array.isArray(children)) {
    return children === null || children === void 0 ? void 0 : children.filter(child => {
      var _child$type;

      return !['Search', 'ExpandableSearch'].includes(child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName);
    });
  }

  if (children && !['Search', 'ExpandableSearch'].includes(children === null || children === void 0 ? void 0 : (_children$type = children.type) === null || _children$type === void 0 ? void 0 : _children$type.displayName)) {
    return children;
  }

  return null;
}

function renderChildren(children) {
  var _children$type2;

  if (Array.isArray(children)) {
    children.map((child, index) => {
      var _child$type2;

      if (index === 0 && ((_child$type2 = child.type) === null || _child$type2 === void 0 ? void 0 : _child$type2.displayName) === 'Search') {
        return child;
      }

      return child;
    });
  }

  if (children && ((_children$type2 = children.type) === null || _children$type2 === void 0 ? void 0 : _children$type2.displayName) === 'Search') {
    return children;
  }

  return children;
}

function ContainedList(_ref) {
  var _action$type;

  let {
    action,
    children,
    className,
    isInset,
    kind = variants[0],
    label,
    size = 'lg'
  } = _ref;
  const labelId = `${useId.useId('contained-list')}-header`;
  const prefix = usePrefix.usePrefix();
  const classes = cx__default["default"](`${prefix}--contained-list`, {
    [`${prefix}--contained-list--inset-rulers`]: isInset
  }, `${prefix}--contained-list--${kind}`, `${prefix}--contained-list--${size}`, className);
  const filteredChildren = filterChildren(children);
  const isActionSearch = ['Search', 'ExpandableSearch'].includes(action === null || action === void 0 ? void 0 : (_action$type = action.type) === null || _action$type === void 0 ? void 0 : _action$type.displayName);
  const renderedChildren = renderChildren(children);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: classes
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--contained-list__header`
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    id: labelId,
    className: `${prefix}--contained-list__label`
  }, label), /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--contained-list__action`
  }, action)), children && /*#__PURE__*/React__default["default"].createElement("ul", {
    "aria-labelledby": labelId
  }, isActionSearch ? filteredChildren : renderedChildren));
}

ContainedList.propTypes = {
  /**
   * A slot for a possible interactive element to render.
   */
  action: PropTypes__default["default"].node,

  /**
   * A collection of ContainedListItems to be rendered in the ContainedList
   */
  children: PropTypes__default["default"].node,

  /**
   * Additional CSS class names.
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the dividing lines in between list items should be inset.
   */
  isInset: PropTypes__default["default"].bool,

  /**
   * The kind of ContainedList you want to display
   */
  kind: PropTypes__default["default"].oneOf(variants),

  /**
   * A label describing the contained list.
   */
  label: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].node]).isRequired,

  /**
   * Specify the size of the contained list.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl'])
};

exports["default"] = ContainedList;
