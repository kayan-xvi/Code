"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
// Carbon Prefix
var configs_1 = require("../configs");
// @ts-ignore
var classnames_1 = __importDefault(require("classnames"));
var ShapeNode = function (_a) {
    var _b;
    var _c = _a.as, as = _c === void 0 ? 'div' : _c, className = _a.className, _d = _a.href, href = _d === void 0 ? null : _d, _e = _a.onClick, onClick = _e === void 0 ? null : _e, _f = _a.onMouseEnter, onMouseEnter = _f === void 0 ? null : _f, _g = _a.onMouseOver, onMouseOver = _g === void 0 ? null : _g, _h = _a.onMouseOut, onMouseOut = _h === void 0 ? null : _h, _j = _a.onMouseLeave, onMouseLeave = _j === void 0 ? null : _j, _k = _a.onMouseMove, onMouseMove = _k === void 0 ? null : _k, _l = _a.position, position = _l === void 0 ? 'fixed' : _l, _m = _a.bodyPosition, bodyPosition = _m === void 0 ? 'absolute' : _m, renderIcon = _a.renderIcon, _o = _a.size, size = _o === void 0 ? 48 : _o, stacked = _a.stacked, _p = _a.shape, shape = _p === void 0 ? 'circle' : _p, subtitle = _a.subtitle, title = _a.title;
    var namespace = configs_1.carbonPrefix + "--cc--shape-node";
    var Component = 'div';
    if (href) {
        Component = 'a';
    }
    else if (onClick) {
        Component = 'button';
    }
    var circleClasses = classnames_1.default(namespace, (_b = {},
        _b[namespace + "--stacked"] = stacked,
        _b[namespace + "--" + shape] = shape,
        _b[namespace + "--" + Component] = Component,
        _b[className] = className,
        _b));
    var titleElement = title ? (react_1.default.createElement("div", { className: namespace + "__title" }, title)) : null;
    var subtitleElement = subtitle ? (react_1.default.createElement("div", { className: namespace + "__subtitle" }, subtitle)) : null;
    return (
    // @ts-ignore
    react_1.default.createElement(Component, { className: circleClasses, onClick: onClick, onMouseEnter: onMouseEnter, onMouseOver: onMouseOver, onMouseOut: onMouseOut, onMouseLeave: onMouseLeave, onMouseMove: onMouseMove, style: { height: size, width: size, position: position }, tabIndex: 0 },
        react_1.default.createElement("div", { className: namespace + "__icon" }, renderIcon),
        react_1.default.createElement("div", { className: namespace + "__body", style: { position: bodyPosition } },
            titleElement,
            subtitleElement)));
};
ShapeNode.propTypes = {
    /** Provide a custom element to be rendered instead of the default */
    as: prop_types_1.default.oneOf(['div', 'a', 'button']),
    /**
     * Provide an optional class to be applied on the outer element
     */
    className: prop_types_1.default.string,
    /**
     * Optionally specify an href for the CardNode to become an `<a>` element
     */
    href: prop_types_1.default.string,
    /**
     * Provide an optional function to be called when the CardNode
     * is clicked, turning the CardNode into a `<button>` element
     */
    onClick: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseEnter event
     */
    onMouseEnter: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseOver event
     */
    onMouseOver: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseOut event
     */
    onMouseOut: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseLeave event
     */
    onMouseLeave: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseMove event
     */
    onMouseMove: prop_types_1.default.func,
    /**
     * Function to render your own icon in the underlying button
     */
    renderIcon: prop_types_1.default.oneOfType([prop_types_1.default.func, prop_types_1.default.object]),
    /**
     * Specify the height and width of the shape
     * Can be defined using any CSS length unit (px, %, rem)
     */
    size: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * Specify whether the node displays a stacked effect
     */
    stacked: prop_types_1.default.bool,
    /**
     * Specify the shape of the node
     */
    shape: prop_types_1.default.oneOf(['circle', 'square', 'rounded-square']),
    /**
     * Specify the node's subtitle
     */
    subtitle: prop_types_1.default.string,
    /**
     * Specify the node's title
     */
    title: prop_types_1.default.string,
};
exports.default = ShapeNode;
