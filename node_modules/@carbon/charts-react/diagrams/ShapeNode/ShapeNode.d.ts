import React from 'react';
import PropTypes from 'prop-types';
declare const ShapeNode: {
    ({ as, className, href, onClick, onMouseEnter, onMouseOver, onMouseOut, onMouseLeave, onMouseMove, position, bodyPosition, renderIcon, size, stacked, shape, subtitle, title, }: any): JSX.Element;
    propTypes: {
        /** Provide a custom element to be rendered instead of the default */
        as: PropTypes.Requireable<string>;
        /**
         * Provide an optional class to be applied on the outer element
         */
        className: PropTypes.Requireable<string>;
        /**
         * Optionally specify an href for the CardNode to become an `<a>` element
         */
        href: PropTypes.Requireable<string>;
        /**
         * Provide an optional function to be called when the CardNode
         * is clicked, turning the CardNode into a `<button>` element
         */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseEnter event
         */
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseOver event
         */
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseOut event
         */
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseLeave event
         */
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseMove event
         */
        onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Function to render your own icon in the underlying button
         */
        renderIcon: PropTypes.Requireable<object>;
        /**
         * Specify the height and width of the shape
         * Can be defined using any CSS length unit (px, %, rem)
         */
        size: PropTypes.Requireable<React.ReactText>;
        /**
         * Specify whether the node displays a stacked effect
         */
        stacked: PropTypes.Requireable<boolean>;
        /**
         * Specify the shape of the node
         */
        shape: PropTypes.Requireable<string>;
        /**
         * Specify the node's subtitle
         */
        subtitle: PropTypes.Requireable<string>;
        /**
         * Specify the node's title
         */
        title: PropTypes.Requireable<string>;
    };
};
export default ShapeNode;
