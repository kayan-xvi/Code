"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
// @ts-ignore
var classnames_1 = __importDefault(require("classnames"));
// Carbon Prefix
var configs_1 = require("../configs");
var namespace = configs_1.carbonPrefix + "--cc--card-node";
var CardNode = function (_a) {
    var _b;
    var _c = _a.as, as = _c === void 0 ? 'div' : _c, children = _a.children, className = _a.className, color = _a.color, _d = _a.href, href = _d === void 0 ? null : _d, _e = _a.onMouseEnter, onMouseEnter = _e === void 0 ? null : _e, _f = _a.onMouseOver, onMouseOver = _f === void 0 ? null : _f, _g = _a.onMouseOut, onMouseOut = _g === void 0 ? null : _g, _h = _a.onMouseLeave, onMouseLeave = _h === void 0 ? null : _h, _j = _a.onMouseMove, onMouseMove = _j === void 0 ? null : _j, _k = _a.onClick, onClick = _k === void 0 ? null : _k, _l = _a.position, position = _l === void 0 ? 'static' : _l, stacked = _a.stacked;
    var Component = 'div';
    if (as !== 'div') {
        Component = as;
    }
    else if (href) {
        Component = 'a';
    }
    else if (onClick) {
        Component = 'button';
    }
    var cardClasses = classnames_1.default(namespace, (_b = {},
        _b[namespace + "--stacked"] = stacked,
        _b[namespace + "--" + Component] = Component,
        _b[className] = className,
        _b));
    return (
    // @ts-ignore
    react_1.default.createElement(Component, { className: cardClasses, onClick: onClick, onMouseEnter: onMouseEnter, onMouseOver: onMouseOver, onMouseOut: onMouseOut, onMouseLeave: onMouseLeave, onMouseMove: onMouseMove, style: { borderColor: color, position: position }, tabIndex: 0 }, children));
};
exports.default = CardNode;
CardNode.propTypes = {
    /** Provide a custom element to be rendered instead of the default */
    as: prop_types_1.default.elementType,
    /**
     * Pass in the children that will be rendered within the CardNode
     */
    children: prop_types_1.default.node,
    /**
     * Provide an optional class to be applied on the outer element
     */
    className: prop_types_1.default.string,
    /**
     * Specify the node's border color
     */
    color: prop_types_1.default.string,
    /**
     * Optionally specify an href for the CardNode to become an `<a>` element
     */
    href: prop_types_1.default.string,
    /**
     * Provide an optional function to be called when the CardNode
     * is clicked, turning the CardNode into a `<button>` element
     */
    onClick: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseEnter event
     */
    onMouseEnter: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseOver event
     */
    onMouseOver: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseOut event
     */
    onMouseOut: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseLeave event
     */
    onMouseLeave: prop_types_1.default.func,
    /**
     * Provide an optional function to be called for the onMouseMove event
     */
    onMouseMove: prop_types_1.default.func,
    /**
     * Specify whether the node displays a stacked effect
     */
    stacked: prop_types_1.default.bool,
};
