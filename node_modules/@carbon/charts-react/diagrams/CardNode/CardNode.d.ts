import PropTypes from 'prop-types';
declare const CardNode: {
    ({ as, children, className, color, href, onMouseEnter, onMouseOver, onMouseOut, onMouseLeave, onMouseMove, onClick, position, stacked, }: any): JSX.Element;
    propTypes: {
        /** Provide a custom element to be rendered instead of the default */
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        /**
         * Pass in the children that will be rendered within the CardNode
         */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Provide an optional class to be applied on the outer element
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specify the node's border color
         */
        color: PropTypes.Requireable<string>;
        /**
         * Optionally specify an href for the CardNode to become an `<a>` element
         */
        href: PropTypes.Requireable<string>;
        /**
         * Provide an optional function to be called when the CardNode
         * is clicked, turning the CardNode into a `<button>` element
         */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseEnter event
         */
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseOver event
         */
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseOut event
         */
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseLeave event
         */
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called for the onMouseMove event
         */
        onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Specify whether the node displays a stacked effect
         */
        stacked: PropTypes.Requireable<boolean>;
    };
};
export default CardNode;
