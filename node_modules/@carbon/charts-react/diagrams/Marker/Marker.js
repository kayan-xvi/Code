"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeMarker = exports.SquareMarker = exports.DiamondMarker = exports.CircleMarker = exports.ArrowRightMarker = exports.ArrowLeftMarker = exports.default = void 0;
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
// @ts-ignore
var classnames_1 = __importDefault(require("classnames"));
// Carbon Prefix
var configs_1 = require("../configs");
var markerDefinitions_1 = require("@carbon/charts/components/diagrams/markerDefinitions");
var Marker = function (_a) {
    var _b;
    var className = _a.className, color = _a.color, d = _a.d, id = _a.id, _c = _a.orient, orient = _c === void 0 ? 'auto' : _c, height = _a.height, width = _a.width, _d = _a.position, position = _d === void 0 ? 'end' : _d, refX = _a.refX, refY = _a.refY;
    var namespace = configs_1.carbonPrefix + "--cc--marker";
    var classes = classnames_1.default(namespace, (_b = {},
        _b[className] = className,
        _b));
    var xPos = position === 'end' ? width / 2 + 0.5 : 0.5;
    var yPos = height / 2;
    return (react_1.default.createElement("marker", { className: classes, markerHeight: height, markerWidth: width, orient: orient, id: id, refX: refX || xPos, refY: refY || yPos, markerUnits: "userSpaceOnUse" },
        react_1.default.createElement("path", { d: d, style: { fill: color } })));
};
exports.default = Marker;
var ArrowLeftMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.arrowLeft, rest));
};
exports.ArrowLeftMarker = ArrowLeftMarker;
var ArrowRightMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.arrowRight, rest));
};
exports.ArrowRightMarker = ArrowRightMarker;
var CircleMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.circle, rest));
};
exports.CircleMarker = CircleMarker;
var DiamondMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.diamond, rest));
};
exports.DiamondMarker = DiamondMarker;
var SquareMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.square, rest));
};
exports.SquareMarker = SquareMarker;
var TeeMarker = function (_a) {
    var rest = __rest(_a, []);
    return react_1.default.createElement(Marker, __assign({}, markerDefinitions_1.tee, rest));
};
exports.TeeMarker = TeeMarker;
Marker.propTypes = {
    /**
     * Provide an optional class to be applied on the outer element
     */
    className: prop_types_1.default.string,
    /**
     * Specify the marker's color
     */
    color: prop_types_1.default.string,
    /**
     * Specify a path string
     */
    d: prop_types_1.default.string,
    /**
     * Specify an ID for the marker
     */
    id: prop_types_1.default.string,
    /**
     * Specify the orient attribute for the marker
     */
    orient: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * Specify the height attribute for the marker
     */
    height: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * Specify the width attribute for the marker
     */
    width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * Specify whether this marker appears at the start or end of a line
     */
    position: prop_types_1.default.oneOf(['end', 'start']),
    /**
     * Specify the refX attribute for the marker
     */
    refX: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * Specify the refY attribute for the marker
     */
    refY: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
};
